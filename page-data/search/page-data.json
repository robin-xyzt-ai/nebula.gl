{"componentChunkName":"component---node-modules-gatsby-theme-ocular-src-templates-search-jsx","path":"/search","result":{"pageContext":{"isCreatedByStatefulCreatePages":false,"data":[{"excerpt":"Overview nebula.gl provides editable and interactive map overlay layers, built using the power of deck.gl. Design Goals nebula.gl aspires to…","rawMarkdownBody":"# Overview\n\n[nebula.gl](https://nebula.gl) provides editable and interactive map overlay layers, built using the power of [deck.gl](https://deck.gl/).\n\n## Design Goals\n\nnebula.gl aspires to be an ultra-performant, fully 3D-enabled GeoJSON editing system primarily focused on geospatial editing use cases.\n\n- Maximal rendering and editing performance, without need for complex application logic (such as splitting data into subgroups etc).\n- Target performance: Editing at 60fps (e.g. dragging sub objects) in GeoJSON payloads with 100K features (points, lines or polygons).\n- Handles GeoJSON corner cases, e.g. automatically changing object types from `Polygon` to `MultiPolygon` when addition polygons are added.\n- Fully 3D enabled (Can e.g. use WebGL z-buffer so that lines being rendered are properly occluded by other geometry).\n- Seamless integration with deck.gl and all geospatial deck.gl layers, allowing for GeoJSON editing to be interleaved with rich 3D visualizations.\n- Handle all aspects of event handling, including touch screen support.\n\n## Why nebula.gl?\n\nYou should strongly consider nebula.gl:\n\n- You want a full-featured, ultra-high-performance editing solution for GeoJson.\n- You are already using e.g. `deck.gl` or `react-map-gl`.\n\nYou may want to look at alternatives if:\n\n- If you have very simple editing requirements (just a simple polygon etc)\n- If you don't want to use `deck.gl` in your project.\n\nIf nebula.gl is more than what you need (e.g. in terms of bundle size), and you may want to look at other solutions, e.g. the simple polygon editor overlay being developed in react-map-gl.\n\nThat said, if you are already using `deck.gl` the additional overhead of nebula.gl is small, and the seamless integration with deck.gl should be valuable.\n\n## Quick Overview of the nebula.gl API\n\n### EditableGeoJsonLayer\n\n[EditableGeoJsonLayer](/docs/api-reference/layers/editable-geojson-layer) is implemented as a [deck.gl](https://deck.gl) layer. It provides the ability to view and edit multiple types of geometry formatted as [GeoJSON](https://tools.ietf.org/html/rfc7946) (an open standard format for geometry) including polygons, lines, and points.\n\n#### Callbacks\n\nWhen there is the ability to edit, callbacks are provided to inform you of edits.\n\n### Overlays\n\nThe overlay layers are based on HTML and rendered by the browser. You can use them\nfor complicated objects that follow map points. They are less performant\nbut more flexible. For more details see [Using Html Overlays](/docs/api-reference/overlays/html-overlay)\n","slug":"docs","title":"Overview"},{"excerpt":"FAQ Will this replace deck.gl? No. Should I use layers or overlays? Use layers if you have thousands of data points and rendering is simple…","rawMarkdownBody":"# FAQ\n\n#### Will this replace `deck.gl`?\n\nNo.\n\n#### Should I use `layers` or `overlays`?\n\nUse `layers` if you have thousands of data points and rendering is simple.\nUse `overlays` if you have a few items but want to use HTML to render them.\n","slug":"docs/faq","title":"FAQ"},{"excerpt":"Roadmap v1.0 Maximize performance in all use cases: target is 100k objects being edited at 60fps 2D editing capabilities Basic elevation…","rawMarkdownBody":"# Roadmap\n\n## v1.0\n\n- Maximize performance in all use cases: target is 100k objects being edited at 60fps\n- 2D editing capabilities\n- Basic elevation support\n- Documentation\n- Examples\n- Unit test coverage and build status on homepage\n\n## v2.0\n\n- 3D Editing Capabilities with elevation editing\n- Curved lines and polygons ([Cubic Hermite Spline](https://en.wikipedia.org/wiki/Cubic_Hermite_spline))\n- Full mobile support with touch and multi touch\n- Automated performance evaluation as part of unit tests\n","slug":"docs/roadmap","title":"Roadmap"},{"excerpt":"What's New This page contains highlights of each nebula.gl release. nebula.gl v1.0 Release date: TBD Draw Rectangle From Center Mode new…","rawMarkdownBody":"# What's New\n\nThis page contains highlights of each nebula.gl release.\n\n## nebula.gl v1.0\n\nRelease date: TBD\n\n### Draw Rectangle From Center Mode\n\n- new `DrawRectangleFromCenterMode`. User can draw a new rectangular `Polygon` feature by clicking the center, then along a corner of the rectangle.\n\n### Translate mode\n\n- `screenSpace` option can be provided in the `modeConfig` of Translate mode so the features will be translated without distortion in screen space.\n\n### Modify mode\n\n- `lockRectangles` option can be provided in the `modeConfig` object for ModifyMode, so the features with `properties.shape === 'Rectangle'` will preserve rectangular shape.\n\n### EditableGeojsonLayer\n\n- `pickingLineWidthExtraPixels` property to specify additional line width in pixels for picking. Can be useful when `EditableGeojsonLayer` is over a deck.gl layer and precise picking is problematic, and when usage of `pickingDepth` introduces performance issues.\n\n### Other\n\n- Check [CHANGELOG](../CHANGELOG.md) for full list of changes.\n","slug":"docs/whats-new","title":"What's New"},{"excerpt":"Basic usage Live example on codesandbox See Also EditableGeoJsonLayer Using deck.gl with React Using deck.gl with a Base Map","rawMarkdownBody":"# Basic usage\n\n```jsx\nimport React from 'react';\nimport DeckGL from 'deck.gl';\nimport {\n  EditableGeoJsonLayer,\n  DrawLineStringMode,\n  DrawPolygonMode\n} from 'nebula.gl';\nimport { StaticMap } from 'react-map-gl';\n\nconst INITIAL_VIEW_STATE = {\n  longitude: -122.41669,\n  latitude: 37.7853,\n  zoom: 13,\n  pitch: 0,\n  bearing: 0\n};\n\nexport function GeometryEditor() {\n  const [features, setFeatures] = React.useState({\n    type: 'FeatureCollection',\n    features: []\n  });\n  const [mode, setMode] = React.useState(() => DrawPolygonMode);\n  const [selectedFeatureIndexes] = React.useState([]);\n\n  const layer = new EditableGeoJsonLayer({\n    data: features,\n    mode,\n    selectedFeatureIndexes,\n    onEdit: ({ updatedData }) => {\n      setFeatures(updatedData);\n    }\n  });\n\n  return (\n    <>\n      <DeckGL\n        initialViewState={INITIAL_VIEW_STATE}\n        controller={{\n          doubleClickZoom: false\n        }}\n        layers={[layer]}\n        getCursor={layer.getCursor.bind(layer)}\n      >\n        <StaticMap mapboxApiAccessToken={YOUR_TOKEN_HERE} />\n      </DeckGL>\n\n      <div className='controls'>\n        <button\n          className={`button ${mode === DrawLineStringMode ? 'active' : ''}`}\n          onClick={() => setMode(() => DrawLineStringMode)}\n        >\n          Line\n        </button>\n        <button\n          className={`button ${mode === DrawPolygonMode ? 'active' : ''}`}\n          onClick={() => setMode(() => DrawPolygonMode)}\n        >\n          Polygon\n        </button>\n      </div>\n    </>\n  );\n}\n\n```\nLive example on [codesandbox](https://codesandbox.io/s/nebula-react-basic-example-q7t9u?file=/src/App.js)\n## See Also\n\n- [EditableGeoJsonLayer](https://nebula.gl/docs/api-reference/layers/editable-geojson-layer)\n- [Using deck.gl with React](https://deck.gl/docs/get-started/using-with-react)\n- [Using deck.gl with a Base Map](https://deck.gl/docs/get-started/using-with-map)\n","slug":"docs/get-started/basic-usage","title":"Basic usage"},{"excerpt":"Using Html Overlays HTML overlays are very easy to use and take advantage of react's architecture. Example Checkout the Unesco World…","rawMarkdownBody":"# Using Html Overlays\n\nHTML overlays are very easy to use and take advantage of [react's architecture](https://reactjs.org/docs/).\n\n```jsx\n<HtmlOverlay>\n  <HtmlOverlayItem coordinates={coordinates}>{title}</HtmlOverlayItem>\n</HtmlOverlay>\n```\n\n## Example\n\nCheckout the [Unesco World Heritage](/docs/interactive-examples/world-heritage) example.\n\n## See Also\n\n- [Html Overlay](/docs/api-reference/overlays/html-overlay)\n- [Html Overlay Item](/docs/api-reference/overlays/html-overlay-item)\n","slug":"docs/get-started/html-overlays","title":"Using Html Overlays"},{"excerpt":"React Map GL Draw Example There is a more advanced example inside examples/react-map-gl-draw.","rawMarkdownBody":"# React Map GL Draw Example\n\nThere is a more advanced example inside `examples/react-map-gl-draw`.\n\n[codesandbox](embedded-codesandbox://react-map-gl-draw)\n","slug":"docs/interactive-examples/react-map-gl-draw-example","title":"React Map GL Draw Example"},{"excerpt":"Installation nebula.gl will automatically install a compatible version of deck.gl.","rawMarkdownBody":"# Installation\n\n```bash\nyarn add \"@nebula.gl/layers\"\nyarn add \"@nebula.gl/overlays\"\n```\n\nnebula.gl will automatically install a compatible version of deck.gl.\n","slug":"docs/get-started/installing","title":"Installation"},{"excerpt":"Unesco World Heritage Wait for list to load. You can observe the automatic clustering.\nThere is a more advanced example inside examples…","rawMarkdownBody":"# Unesco World Heritage\n\nWait for list to load. You can observe the automatic clustering.\nThere is a more advanced example inside `examples/overlays`.\n\n[codesandbox](embedded-codesandbox://world-heritage)\n\n### Source\n\nhttps://github.com/uber/nebula.gl/blob/master/examples/codesandbox/world-heritage/index.js\n","slug":"docs/interactive-examples/world-heritage","title":"Unesco World Heritage"},{"excerpt":"React Map GL Draw react-map-gl-draw is a react based drawing library tailored for react-map-gl. Options mode (Object, Optional) - A mode…","rawMarkdownBody":"# React Map GL Draw\n\n`react-map-gl-draw` is a react based drawing library tailored for [`react-map-gl`](https://github.com/uber/react-map-gl).\n\n## Options\n\n- `mode` (Object, Optional) - A mode instance. default to null.\n\nSupport the following modes from `@nebula.gl/edit-modes`. Note: Currently `react-map-gl-draw` does not support `modeConfig` in `@nebula.gl/edit-modes`.\n\n- `DrawCircleByDiameterMode`: Lets you draw a GeoJson `Circle` feature.\n- `DrawCircleFromCenterMode`: Lets you draw a GeoJson `Circle` feature.\n- `DrawPointMode`: Lets you draw a GeoJson `Point` feature.\n- `DrawLineStringMode`: Lets you draw a GeoJson `LineString` feature.\n- `DrawPolygonMode`: Lets you draw a GeoJson `Polygon` feature.\n- `DrawRectangleMode`: Lets you draw a `Rectangle` (represented as GeoJson `Polygon` feature) with two clicks - start drawing on first click, and finish drawing on second click.\n  - If you'd like to starting drawing by mouse down and end drawing by mouse up, you can use `modeConfig: {dragToDraw: true}`. See `modeConfig` for more details.\n\nAnd an advanced\n\n- `EditingMode`: Lets you select and drag vertices; and drag features.\n\n- `modeConfig` (Object, Optional) - Additional configuration for the provided mode.\n  Check `nebula.gl` [doc](https://github.com/uber/nebula.gl/blob/master/docs/api-reference/modes/overview.md) to see mode details.\n\n* `features` (Feature[], Optional) - List of features in GeoJson format. If `features` are provided from users, then `react-map-gl-draw` respect the users' input, and therefore ignore any internal `features`. But if `features` are not provided, then `react-map-gl-draw` manages `features` internally, and users can access and manipulate the features by calling `getFeatures`, `addFeatures`, and `deleteFeatures`.\n* `selectedFeatureIndex` (String, Optional) - Index of the selected feature.\n* `clickRadius` (Number, Optional) - Radius to detect features around a hovered or clicked point. Default value is `0`\n\n* `onSelect` (Function, Optional) - callback when clicking a position when `selectable` set to true. Receives an object containing the following parameters\n\n  - `selectedFeature`: selected feature. `null` if clicked an empty space.\n  - `selectedFeatureIndex`: selected feature index.`null` if clicked an empty space.\n  - `editHandleIndex`: selected editHandle index. `null` if clicked an empty space.\n  - `screenCoords`: screen coordinates of the clicked position.\n  - `mapCoords`: map coordinates of the clicked position.\n\n* `onUpdate` (Function, Optional) - callback when any feature is updated. Receives an object containing the following parameters\n  - `data` (Feature[]) - the updated list of GeoJSON features.\n  - `editType` (String) - `addFeature`, `addPosition`, `finishMovePosition`\n  - `editContext` (Array) - list of edit objects, depend on `editType`, each object may contain `featureIndexes`, `editHandleIndexes`, `screenCoords`, `mapCoords`.\n\n**Feature object structure:**\n\n```js\n{\n  id, // an unique identified generated inside react-map-gl-draw library\n  geometry: {\n    coordinates, // latitude longitude pairs of the geometry points\n    type // geojson type, one of `Point`, `LineString`, or `Polygon`\n  },\n  properties: {\n    renderType, // Mainly used for styling, one of `Point`, `LineString`, `Polygon`, or `Rectangle`. Different from `geometry.type`. i.e. a rectangle's renderType is `Rectangle`, and `geometry.type` is `Polygon`. An incomplete (not closed) Polygon's renderType is `Polygon`, `geometry.type` is `LineString`\n    ...otherProps // other properties user passed in\n  }\n}\n```\n\n### Styling related options\n\n- `featureStyle` (Object|Function, Optional) : Object - Either a [style objects](https://reactjs.org/docs/dom-elements.html#style) or a function to style a feature, function parameters are\n  - `feature`: feature to style.\n  - `index`: index of the feature.\n  - `state`: one of `SELECTED`, `HOVERED`, `INACTIVE`, `UNCOMMITTED`, `CLOSING`.\n\nReturns is a map of [style objects](https://reactjs.org/docs/dom-elements.html#style) passed to SVG `path` elements.\n\n- `featureShape` (String|Function, Optional): if is a string, should be one of `rect` or `circle`. If is a function, will receive the following parameters\n\n  - `feature`: feature to style.\n  - `index`: index of the feature.\n  - `state`: one of `SELECTED`, `HOVERED`, `INACTIVE`, `UNCOMMITTED`, `CLOSING`.\n\n- `editHandleStyle` (Object|Function, Optional) : Object - Either a [style objects](https://reactjs.org/docs/dom-elements.html#style) or a function to style an `editHandle`, function parameters are\n  - `feature`: feature to style.\n  - `index`: index of the editHandle vertex in the feature.\n  - `state`: one of `SELECTED`, `HOVERED`, `INACTIVE`, `UNCOMMITTED`, `CLOSING`.\n  - `shape`: shape resolved from `editHandleShape`.\n\nReturns is a map of [style objects](https://reactjs.org/docs/dom-elements.html#style) passed to SVG `circle` or `rect` elements.\n\n- `editHandleShape` (String|Function, Optional): if is a string, should be one of `rect` or `circle`. If is a function, will receive the following parameters\n  - `feature`: feature to style.\n  - `index`: index of the editHandle vertex in the feature.\n  - `state`: one of `SELECTED`, `HOVERED`, `INACTIVE`, `UNCOMMITTED`, `CLOSING`.\n\n## Explanations\n\n- `Feature`: any drawn shape, one of point, line, polygon or rectangle.\n- `EditHandle`: vertex of the feature being edited.\n\n### State related concepts:\n\n- `INACTIVE`: neither selected nor hovered, default state of a complete `feature` or `editHandle`.\n- `SELECTED`: being clicked or dragged.\n- `HOVERED`: hovered over by the mouse pointer.\n- `UNCOMMITTED`: in the middle of drawing, not yet added to the feature being edited.\n- `CLOSING`: closing a polygon.\n\n### Styling based on `state`:\n\n![img](https://raw.githubusercontent.com/uber-common/deck.gl-data/master/nebula.gl/react-map-gl-draw.png)\n\nAs shown in the above image, for the feature currently being edited,\n\n- `featureStyle({feature, state: SELECTED})` will be applied to the committed parts of the feature. (Green strokes)\n- `editHandleStyle({state: SELECTED})` will be applied to the committed editHandle vertices. (Vertices with black stroke)\n- `featureStyle({feature, state: UNCOMMITTED})` will be applied to the uncommitted parts of the feature. (Gray stroke)\n- `editHandleStyle({state: UNCOMMITTED})` will be applied to the uncommitted editHandle vertex. (Gray vertex)\n\n## Methods\n\n##### `getFeatures`\n\n- Return a list of finished GeoJson features.\n\n##### `addFeatures` (Feature | Feature[])\n\n- Add a single or multiple GeoJson features to editor.\n\n##### `deleteFeatures` (Feature | Feature[])\n\n- Delete a single or multiple GeoJson features to editor.\n\n## Know Issues\n\n- `@turf/difference`: If you are seeing the below error, you can force `@turf/difference`'s version in your project `package.json` file and redo `yarn install`.\n\n```bash\n./node_modules/@turf/difference/index.mjs Can't import the named export 'diff' from non EcmaScript module (only default export is available)\n```\n\n```json\n{\n  ...,\n  \"dependencies\": {\n    ...\n  },\n  \"resolutions\": {\n    \"@turf/difference\": \"6.0.1\"\n  }\n}\n```\n\nreferences:\n\n- [yarn](https://classic.yarnpkg.com/en/docs/selective-version-resolutions/)\n- [`@turf/difference` issue](https://github.com/Turfjs/turf/issues/1833)\n- related issues: [issues/335](https://github.com/uber/nebula.gl/issues/335) [issues/333](https://github.com/uber/nebula.gl/issues/333)\n\n## Code Example\n\n**Basic example: Draw polygon**\n\n```js\nimport * as React from 'react';\nimport MapGL from 'react-map-gl';\nimport { Editor, DrawPolygonMode } from 'react-map-gl-draw';\n\nconst DEFAULT_VIEWPORT = {\n  width: 800,\n  height: 600,\n  longitude: -122.45,\n  latitude: 37.78,\n  zoom: 14,\n};\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      viewport: DEFAULT_VIEWPORT,\n      modeHandler: null,\n    };\n  }\n\n  _updateViewport = (viewport) => {\n    this.setState({ viewport });\n  };\n\n  render() {\n    const { viewport } = this.state;\n    const mode = React.useState(new DrawPolygonMode());\n    return (\n      <MapGL\n        {...viewport}\n        width=\"100%\"\n        height=\"100%\"\n        mapStyle={'mapbox://styles/mapbox/light-v9'}\n        onViewportChange={this._updateViewport}\n      >\n        <Editor\n          // to make the lines/vertices easier to interact with\n          clickRadius={12}\n          mode={mode}\n        />\n        {this._renderToolbar()}\n      </MapGL>\n    );\n  }\n}\n```\n\n**Add customized styles**\n\nThis is continuous example extends from the `Basic Example`. Check default [style](https://github.com/uber/nebula.gl/blob/master/modules/react-map-gl-draw/src/style.ts) used in editor for more details.\n\n```js\nconst mode = React.useState(new DrawPolygonMode())\n<Editor\n  // to make the lines/vertices easier to interact with\n  clickRadius={12}\n  mode={mode}\n  featureStyle={({ feature, state }) => {\n    if (state === RENDER_STATE.SELECTED) {\n      return {\n        stroke: 'rgb(38, 181, 242)',\n        fill: 'rgb(189,189,189)',\n      };\n    }\n    return {\n      stroke: 'rgb(189,189,189)',\n      strokeDasharray: '4,2',\n    };\n  }}\n  editHandleStyle={({ feature, shape, state }) => {\n    if (state === RENDER_STATE.SELECTED) {\n      return {\n        stroke: 'rgb(38, 181, 242)',\n        fill: 'rgb(189,189,189)',\n      };\n    }\n    return {\n      stroke: 'rgb(189,189,189)',\n      strokeDasharray: '4,2',\n    };\n  }}\n  editHandleShape={'circle'}\n/>\n```\n\n**Advanced example: multiple draw modes and editing drawn features**\n\n[codesandbox](https://codesandbox.io/s/react-map-gl-draw-example-5n97w?file=/src/app.js)\n\n```js\nimport React, { Component } from 'react';\nimport MapGL from 'react-map-gl';\nimport { Editor, EditingMode, DrawLineStringMode, DrawPolygonMode } from 'react-map-gl-draw';\n\nconst MODES = [\n  { id: 'drawPolyline', text: 'Draw Polyline', handler: DrawLineStringMode },\n  { id: 'drawPolygon', text: 'Draw Polygon', handler: DrawPolygonMode },\n  { id: 'editing', text: 'Edit Feature', handler: EditingMode },\n];\n\nconst DEFAULT_VIEWPORT = {\n  width: 800,\n  height: 600,\n  longitude: -122.45,\n  latitude: 37.78,\n  zoom: 14,\n};\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      viewport: DEFAULT_VIEWPORT,\n      modeId: null,\n      modeHandler: null,\n    };\n  }\n\n  _switchMode = (evt) => {\n    const modeId = evt.target.value === this.state.modeId ? null : evt.target.value;\n    const mode = MODES.find((m) => m.id === modeId);\n    const modeHandler = mode ? new mode.handler() : null;\n    this.setState({ modeId, modeHandler });\n  };\n\n  _renderToolbar = () => {\n    return (\n      <div style={{ position: 'absolute', top: 0, right: 0, maxWidth: '320px' }}>\n        <select onChange={this._switchMode}>\n          <option value=\"\">--Please choose a draw mode--</option>\n          {MODES.map((mode) => (\n            <option key={mode.id} value={mode.id}>\n              {mode.text}\n            </option>\n          ))}\n        </select>\n      </div>\n    );\n  };\n\n  _updateViewport = (viewport) => {\n    this.setState({ viewport });\n  };\n\n  render() {\n    const { viewport, modeHandler } = this.state;\n    return (\n      <MapGL\n        {...viewport}\n        width=\"100%\"\n        height=\"100%\"\n        mapStyle={'mapbox://styles/mapbox/light-v9'}\n        onViewportChange={this._updateViewport}\n      >\n        <Editor\n          // to make the lines/vertices easier to interact with\n          clickRadius={12}\n          mode={modeHandler}\n        />\n        {this._renderToolbar()}\n      </MapGL>\n    );\n  }\n}\n```\n","slug":"docs/api-reference/react-map-gl-draw/react-map-gl-draw","title":"React Map GL Draw"},{"excerpt":"HtmlClusterOverlay Use this class if you have HTML items that need to be displayed at specific geo coordinates on the map\nand cluster based…","rawMarkdownBody":"# HtmlClusterOverlay\n\nUse this class if you have HTML items that need to be displayed at specific geo coordinates on the map\nand cluster based on the zoom level.\n**You need to subclass this class**. Then use it as a `react component` inside `DeckGL`.\n\n## Example\n\nFor example code see [Unesco World Heritage](/docs/interactive-examples/world-heritage).\n\n## Methods to override\n\n### getAllObjects()\n\nOverride to provide an array of `Objects` that need clustering.\nIf the items have not changed please provide the same array to avoid\nregeneration of the cluster which causes performance issues.\n\n### getObjectCoordinates(object)\n\nOverride to provide coordinates for each object of getAllObjects().\nReturn array of two numbers.\n\n### renderObject(coordinates, object)\n\nOverride to return an `HtmlOverlayItem` for the single `object` at `coordinates`.\n\n### renderCluster(coordinates, clusterId, pointCount)\n\nOverride to return an HtmlOverlayItem for the `cluster` at `coordinates`.\n`pointCount` is the number of objects that are represented by that cluster.\nUse `getClusterObjects(clusterId)` to get cluster contents.\n\n## Methods (provided)\n\n### getClusterObjects(clusterId)\n\nReturns an array of objects.\n\n### getClusterOptions()\n\nOverride to return options used when instantiating the overlay and thus the\nunderlying [supercluster](https://www.npmjs.com/package/supercluster#options) object.\n","slug":"docs/api-reference/overlays/html-cluster-overlay","title":"HtmlClusterOverlay"},{"excerpt":"HtmlOverlayItem This is an HTML item that will be rendered inside\nHtmlOverlay or\nHtmlClusterOverlay. Note: HtmlOverlayItem must be direct…","rawMarkdownBody":"# HtmlOverlayItem\n\nThis is an HTML item that will be rendered inside\n[HtmlOverlay](/docs/api-reference/overlays/html-overlay) or\n[HtmlClusterOverlay](/docs/api-reference/overlays/html-cluster-overlay).\n\nNote: `HtmlOverlayItem` **must** be direct children of `HtmlOverlay` or `HtmlClusterOverlay`.\n\n```jsx\nreturn (\n  <HtmlOverlayItem\n    style={{\n      transform: 'translate(-50%,-50%)',\n      pointerEvents: 'all',\n    }}\n    coordinates={coordinates}\n    key={key}\n  >\n    YOUR CONTENT HERE.\n  </HtmlOverlayItem>\n);\n```\n\n## Props\n\n### coordinates\n\nArray of two (or three if you want to specify elevation) numbers where this will be displayed.\n\n## Best practices\n\n### Anchor point\n\nBy default the top-left corner will align with the provided `coordinates`.\nYou can use CSS to change the **anchor point**.\nFor example use `transform: 'translate(-50%,-50%)'` to center.\n\n### Mouse events\n\nBy default this will not receive any mouse events.\nUse `pointerEvents: 'all'` to receive events.\n\n### Key property\n\nBecause this is used inside an array of `react components` you\nneed to provide a unique `key`. See the [React docs](https://reactjs.org/docs/lists-and-keys.html)\n","slug":"docs/api-reference/overlays/html-overlay-item","title":"HtmlOverlayItem"},{"excerpt":"HtmlOverlay Use this class if you have HTML items that need to be displayed at specific geo coordinates on the map.\nIf you need clustering…","rawMarkdownBody":"# HtmlOverlay\n\nUse this class if you have HTML items that need to be displayed at specific geo coordinates on the map.\nIf you need clustering see [HtmlClusterOverlay](/docs/api-reference/overlays/html-cluster-overlay).\nYou can subclass this class or provide [HtmlOverlayItem](/docs/api-reference/overlays/html-overlay-item) as children.\nThen use it as a `react component` inside `DeckGL`.\n\n```jsx\n<DeckGL initialViewState={initialViewState} controller={true}>\n  <StaticMap mapboxApiAccessToken={MAPBOX_ACCESS_TOKEN} />\n  <HtmlOverlay>\n    <HtmlOverlayItem coordinates={coordinates}>{title}</HtmlOverlayItem>\n  </HtmlOverlay>\n</DeckGL>\n```\n\nOr if you prefer to subclass:\n\n```jsx\nclass YourClassName extends HtmlOverlay {\n  getItems() {\n    return [\n      <HtmlOverlayItem\n        style={{ ...your style here... }}\n        key={ ... unique key... }\n        coordinates={[-122.41914, 37.77919]}\n      >\n        You can have text and children like <div>...</div>\n      </HtmlOverlayItem>\n    ];\n  }\n}\n```\n\n## Properties\n\n### zIndex\n\nDefault is `1`. Set to `0` to move items _under_ deck.gl layer.\n\n## Methods to override\n\n### getItems()\n\nProvide an array of [HtmlOverlayItem](/docs/api-reference/overlays/html-overlay-item)\nif not providing them as JSX children.\n","slug":"docs/api-reference/overlays/html-overlay","title":"HtmlOverlay"},{"excerpt":"Editing Modes EditModes provide a way of handling user interactions in order to manipulate GeoJSON features and geometries. The following…","rawMarkdownBody":"# Editing Modes\n\n`EditMode`s provide a way of handling user interactions in order to manipulate GeoJSON features and geometries.\n\nThe following are the built-in `EditMode`s provided by nebula.gl:\n\n## [ViewMode](https://github.com/uber/nebula.gl/blob/master/modules/edit-modes/src/lib/view-mode.ts)\n\nNo edits are possible, but selection is still possible.\n\n## [ModifyMode](https://github.com/uber/nebula.gl/blob/master/modules/edit-modes/src/lib/modify-mode.ts)\n\nUser can move existing points, add intermediate points along lines, and remove points.\n\nThe following options can be provided in the `modeConfig` object for ModifyMode:\n\n- `lockRectangles` (optional): `<boolean>`\n  - If `true`, features with `properties.shape === 'Rectangle'` will preserve rectangular shape.\n\n### Edit Context\n\n`editContext` argument to the `onEdit` callback contains the following properties:\n\n- `positionIndexes` (Array): An array of numbers representing the indexes of the edited position within the feature's `coordinates` array\n\n- `position` (Array): An array containing the ground coordinates (i.e. [lng, lat]) of the edited position\n\n## [ExtrudeMode](https://github.com/uber/nebula.gl/blob/master/modules/edit-modes/src/lib/extrude-mode.ts)\n\nUser can move edge. Click and drag from anywhere between 2 points in edge.\n\n## [ScaleMode](https://github.com/uber/nebula.gl/blob/master/modules/edit-modes/src/lib/scale-mode.ts)\n\nUser can scale a feature about its centroid by clicking and dragging (inward or outward) the selected geometry. This mode supports multiple selections.\n\n## [RotateMode](https://github.com/uber/nebula.gl/blob/master/modules/edit-modes/src/lib/rotate-mode.ts)\n\nUser can rotate a feature about its centroid by clicking and dragging the selected geometry. This mode supports multiple selections.\n\n## [TranslateMode](https://github.com/uber/nebula.gl/blob/master/modules/edit-modes/src/lib/translate-mode.ts)\n\nThe user can move a feature by selecting one or more features and dragging anywhere within the screen.\n_Additionally, the user can initiate snapping by clicking and dragging the selected feature's vertex handles. If the vertex handle is close enough to another feature's vertex, the two features will snap together._\nThe following options can be provided in the `modeConfig` object for TranslateMode:\n\n- `screenSpace` (optional): `<boolean>`\n  - If `true`, the features will be translated without distortion in screen space.\n\n## [TransformMode](https://github.com/uber/nebula.gl/blob/master/modules/edit-modes/src/lib/transform-mode.ts)\n\nA single mode that provides translating, rotating, and scaling capabilities. Translation can be performed by clicking and dragging the selected feature itself. Rotating can be performed by clicking and dragging the top-most edit handle around a centroid pivot. Scaling can be performed by clicking and dragging one of the corner edit handles. Just like the individual modes, this mode supports multiple selections and feature snapping.\n\n## [DuplicateMode](https://github.com/uber/nebula.gl/blob/master/modules/edit-modes/src/lib/duplicate-mode.ts)\n\nUser can duplicate and translate a feature by clicking selected feature and dragging anywhere on the screen.\nThis mode is extends TranslateMode. This mode supports multiple selections.\n\n## [DrawPointMode](https://github.com/uber/nebula.gl/blob/master/modules/edit-modes/src/lib/draw-point-mode.ts)\n\nUser can draw a new `Point` feature by clicking where the point is to be.\n\n## [DrawLineStringMode](https://github.com/uber/nebula.gl/blob/master/modules/edit-modes/src/lib/draw-line-string-mode.ts)\n\nUser can draw a new `LineString` feature by clicking positions to add. User finishes drawing by double-clicking.\n\n## [ExtendLineStringMode](https://github.com/uber/nebula.gl/blob/master/modules/edit-modes/src/lib/extend-line-string-mode.ts)\n\nUser can extend an existing `LineString` feature by clicking positions to add. A single `LineString` feature must be selected for this mode.\n\n### ModeConfig\n\nThe following options can be provided in the `modeConfig` object:\n\n- `drawAtFront` (optional): `<boolean>`\n  - If `true`, will extend from the \"beginning\" of the line, i.e. relative to the start of the coordinates array.\n\n### Edit Context\n\n`editContext` argument to the `onEdit` callback contains the following properties:\n\n- `positionIndexes` (Array): An array of numbers representing the indexes of the added position within the feature's `coordinates` array\n\n- `position` (Array): An array containing the ground coordinates (i.e. [lng, lat]) of the added position\n\n## [ResizeCircleMode](https://github.com/uber/nebula.gl/blob/master/modules/edit-modes/src/lib/resize-circle-mode.js)\n\nUser can resize an existing circular Polygon feature by clicking and dragging along the ring.\n\n## [DrawPolygonMode](https://github.com/uber/nebula.gl/blob/master/modules/edit-modes/src/lib/draw-polygon-mode.js)\n\nUser can draw a new `Polygon` feature by clicking positions to add then closing the polygon (or double-clicking).\n\n### ModeConfig\n\nThe following options can be provided in the `modeConfig` object:\n\n- `preventOverlappingLines` (optional): `boolean`\n  - If `true`, it will not be possible to add a polygon point if the current line overlaps any other lines on the same polygon.\n\n### Edit Context\n\n`editContext` argument to the `onEdit` callback contains the following properties:\n\n- `positionIndexes` (Array): An array of numbers representing the indexes of the added position within the feature's `coordinates` array\n\n- `position` (Array): An array containing the ground coordinates (i.e. [lng, lat]) of the added position\n\n## [Draw90DegreePolygonMode](https://github.com/uber/nebula.gl/blob/master/modules/edit-modes/src/lib/draw-90degree-polygon-mode.ts)\n\nUser can draw a new `Polygon` feature with 90 degree corners (right angle) by clicking positions to add then closing the polygon (or double-clicking). After clicking the 2 points, the draw mode guides/allows to have right angle polygon.\n\n## [DrawPolygonByDraggingMode](https://github.com/uber/nebula.gl/blob/master/modules/edit-modes/src/lib/draw-polygon-by-dragging-mode.ts)\n\nUser can draw a new `Polygon` feature by dragging (similar to the lasso tool commonly found in photo editing software).\n\n### ModeConfig\n\nThe following options can be provided in the `modeConfig` object:\n\n- `throttleMs` (optional): `number`\n  - If provided, the dragging function will be throttled by the specified number of milliseconds.\n\n## [DrawRectangleMode](https://github.com/uber/nebula.gl/blob/master/modules/edit-modes/src/lib/draw-rectangle-mode.ts)\n\nUser can draw a new rectangular `Polygon` feature by clicking two opposing corners of the rectangle.\n\n### ModeConfig\n\nThe following options can be provided in the `modeConfig` object:\n\n- `dragToDraw` (optional): `boolean`\n  - If `true`, user can click and drag instead of clicking twice. Note however, that the user will not be able to pan the map while drawing.\n\n## [DrawRectangleFromCenterMode](https://github.com/uber/nebula.gl/blob/master/modules/edit-modes/src/lib/draw-rectangle-from-center-mode.ts)\n\nUser can draw a new rectangular `Polygon` feature by clicking the center then along a corner of the rectangle.\n\n### ModeConfig\n\nThe following options can be provided in the `modeConfig` object:\n\n- `dragToDraw` (optional): `boolean`\n  - If `true`, user can click and drag instead of clicking twice. Note however, that the user will not be able to pan the map while drawing.\n\n## [DrawRectangleUsingThreePointsMode](https://github.com/uber/nebula.gl/blob/master/modules/edit-modes/src/lib/draw-rectangle-using-three-points-mode.ts)\n\nUser can draw a new rectangular `Polygon` feature by clicking three corners of the rectangle.\n\n## [DrawSquareMode](https://github.com/uber/nebula.gl/blob/master/modules/edit-modes/src/lib/draw-square-mode.ts)\n\nUser can draw a new square-shaped `Polygon` feature by clicking two opposing corners of the square.\n\n## [DrawSquareFromCenterMode](https://github.com/uber/nebula.gl/blob/master/modules/edit-modes/src/lib/draw-square-from-center-mode.ts)\n\nUser can draw a new square-shaped `Polygon` feature by clicking the center and then along one of the corners of the square.\n\n### ModeConfig\n\nThe following options can be provided in the `modeConfig` object:\n\n- `dragToDraw` (optional): `boolean`\n  - If `true`, user can click and drag instead of clicking twice. Note however, that the user will not be able to pan the map while drawing.\n\n## [DrawCircleFromCenterMode](https://github.com/uber/nebula.gl/blob/master/modules/edit-modes/src/lib/draw-circle-from-center-mode.ts)\n\nUser can draw a new circular `Polygon` feature by clicking the center then along the ring.\n\n### ModeConfig\n\nThe following options can be provided in the `modeConfig` object:\n\n- `steps` (optional): `x <number>`\n  - If steps: `x` means the circle will be drawn using `x` number of points.\n- `dragToDraw` (optional): `boolean`\n  - If `true`, user can click and drag instead of clicking twice. Note however, that the user will not be able to pan the map while drawing.\n\n## [DrawCircleByDiameterMode](https://github.com/uber/nebula.gl/blob/master/modules/edit-modes/src/lib/draw-circle-by-diameter-mode.ts)\n\nUser can draw a new circular `Polygon` feature by clicking the two ends of its diameter.\n\n### ModeConfig\n\nThe following options can be provided in the `modeConfig` object:\n\n- `steps` (optional): `x <number>`\n  - If steps: `x` means the circle will be drawn using `x` number of points.\n- `dragToDraw` (optional): `boolean`\n  - If `true`, user can click and drag instead of clicking twice. Note however, that the user will not be able to pan the map while drawing.\n\n## [DrawEllipseByBoundingBoxMode](https://github.com/uber/nebula.gl/blob/master/modules/edit-modes/src/lib/draw-ellipse-by-bounding-box-mode.ts)\n\nUser can draw a new ellipse shape `Polygon` feature by clicking two corners of bounding box.\n\n### ModeConfig\n\nThe following options can be provided in the `modeConfig` object:\n\n- `dragToDraw` (optional): `boolean`\n  - If `true`, user can click and drag instead of clicking twice. Note however, that the user will not be able to pan the map while drawing.\n\n## [DrawEllipseUsingThreePointsMode](https://github.com/uber/nebula.gl/blob/master/modules/edit-modes/src/lib/draw-ellipse-using-three-points-mode.ts)\n\nUser can draw a new ellipse shape `Polygon` feature by clicking center and two corners of the ellipse.\n\n## [SplitPolygonMode](https://github.com/uber/nebula.gl/blob/master/modules/edit-modes/src/lib/split-polygon-mode.ts)\n\nUser can split a polygon by drawing a new `LineString` feature on top of the polygon.\n\n- If the first and the last click is outside the polygon, it will split the polygon\n\n- If the clicked position is inside the polygon, it will not split the polygon\n\n## [MeasureDistanceMode](https://github.com/uber/nebula.gl/blob/master/modules/edit-modes/src/lib/measure-distance-mode.ts)\n\nUser can measure a distance between two points.\n\n### ModeConfig\n\nThe following options can be provided in the `modeConfig` object:\n\n- `turfOptions` (Object, optional)\n\n  - `options` object passed to turf's [distance](https://turfjs.org/docs/#distance) function\n  - Default: `undefined`\n\n- `formatTooltip` (Function, optional)\n\n  - Function to format tooltip text (argument is the numeric distance)\n  - Default: `(distance) => parseFloat(distance).toFixed(2) + units`\n\n- `measurementCallback` (Function, optional)\n\n  - Function to call as measurements are calculated\n  - Default: `undefined`\n\n- `centerTooltipsOnLine` (Boolean, optional)\n\n  - If true, the measurement tooltips appear on the middle of their respective line segments rather than at the end\n  - Default: `false`\n\n## [MeasureAreaMode](https://github.com/uber/nebula.gl/blob/master/modules/edit-modes/src/lib/measure-area-mode.ts)\n\nUser can measure an area by drawing an arbitrary polygon.\n\n### ModeConfig\n\nThe following options can be provided in the `modeConfig` object:\n\n- `formatTooltip` (Function, optional)\n\n  - Function to format tooltip text (argument is the numeric area)\n  - Default: `(distance) => parseFloat(distance).toFixed(2) + units`\n\n- `measurementCallback` (Function, optional)\n  - Function to call as measurements are calculated\n  - Default: `undefined`\n\n## [MeasureAngleMode](https://github.com/uber/nebula.gl/blob/master/modules/edit-modes/src/lib/measure-angle-mode.ts)\n\nUser can measure an angle by drawing two lines.\n\n### ModeConfig\n\nThe following options can be provided in the `modeConfig` object:\n\n- `formatTooltip` (Function, optional)\n\n  - Function to format tooltip text (argument is the numeric area)\n  - Default: `(distance) => parseFloat(angle).toFixed(2) + units`\n\n- `measurementCallback` (Function, optional)\n  - Function to call as measurements are calculated\n  - Default: `undefined`\n\n## [ElevationMode](https://github.com/uber/nebula.gl/blob/master/modules/edit-modes/src/lib/elevation-mode.ts)\n\nUser can move a point up and down.\n\n### ModeConfig\n\nThe following options can be provided in the `modeConfig` object:\n\n- `minElevation` (Number, optional)\n\n  - The minimum elevation to allow\n  - Default: `0`\n\n- `maxElevation` (Number, optional)\n\n  - The maximum elevation to allow\n  - Default: `20000`\n\n- `calculateElevationChange` (Function, optional)\n  - A function to use to calculate the elevation change in response to mouse movement\n  - Default: `10 * <vertical movement in pixels>`\n  - Configure to use movement based on viewport:\n\n```javascript\nif (mode === 'elevation') {\n  modeConfig.calculateElevationChange = (opts) =>\n    ElevationMode.calculateElevationChangeWithViewport(viewport, opts);\n}\n```\n\n## Boolean Operations\n\nFor all polygon drawing modes, the following options can be provided in the `modeConfig` object:\n\n- `booleanOperation` (optional): `null|'union'|'difference'|'intersection'`\n  - If non-null, requires a single `Polygon` or `MultiPolygon` selection\n  - If `null`, the drawn `Polygon` is added as a new feature regardless of selection\n  - If `union`, the drawn `Polygon` is unioned with the selected geometry\n  - If `difference`, the drawn `Polygon` is subtracted from the selected geometry\n  - If `intersection`, the drawn `Polygon` is intersected with the selected geometry\n\n## Composite Mode\n\nUse `CompositeMode` to combine multiple modes.\n_Not all combinations are guaranteed to work._\n\n### Constructor\n\n`new CompositeMode(modes, options = {})`\n\n- `modes`: `Array<EditMode>` Modes you want to combine. **Order is very important.**\n- `options` (optional): Options to be added later.\n\n### Example\n\n```\nnew CompositeMode([new DrawLineStringMode(), new ModifyMode()])\n```\n","slug":"docs/api-reference/modes/overview","title":"Editing Modes"},{"excerpt":"EditableGeoJsonLayer The Editable GeoJSON layer accepts a GeoJSON FeatureCollection and renders the features as editable polygons, lines…","rawMarkdownBody":"# EditableGeoJsonLayer\n\nThe Editable GeoJSON layer accepts a [GeoJSON](http://geojson.org) `FeatureCollection` and renders the features as editable polygons, lines, and points.\n\n```js\nimport DeckGL from '@deck.gl/react';\nimport { EditableGeoJsonLayer, DrawPolygonMode } from 'nebula.gl';\n\nconst myFeatureCollection = {\n  type: 'FeatureCollection',\n  features: [\n    /* insert features here */\n  ],\n};\n\nconst selectedFeatureIndexes = [];\n\nclass App extends React.Component {\n  state = {\n    data: myFeatureCollection,\n  };\n\n  render() {\n    const layer = new EditableGeoJsonLayer({\n      id: 'geojson-layer',\n      data: this.state.data,\n      mode: DrawPolygonMode,\n      selectedFeatureIndexes,\n\n      onEdit: ({ updatedData }) => {\n        this.setState({\n          data: updatedData,\n        });\n      },\n    });\n\n    return <DeckGL {...this.props.viewport} layers={[layer]} />;\n  }\n}\n```\n\n## Properties\n\nInherits all [deck.gl's Base Layer](https://deck.gl/docs/api-reference/core/layer) properties.\n\n`EditableGeoJSONLayer` is a [CompositeLayer](https://deck.gl/docs/api-reference/core/composite-layer) of [GeoJSONLayer](https://deck.gl/docs/api-reference/layers/geojson-layer), [ScatterPlotLayer](https://deck.gl/docs/api-reference/layers/scatterplot-layer), and [IconLayer](https://deck.gl/docs/api-reference/layers/icon-layer). Many of the properties and data getters of those layers are aliased.\n\n#### `data` (Object, optional)\n\n- Default: `null`\n\nA [GeoJSON](http://geojson.org) `FeatureCollection` object. The following types of geometry are supported:\n\n- `Point`\n- `LineString`\n- `Polygon`\n- `MultiPoint`\n- `MultiLineString`\n- `MultiPolygon`\n- `GeometryCollection` is not supported.\n\n_Note: passing a single `Feature` is not supported. However, you can pass a `FeatureCollection` containing a single `Feature` and pass `selectedFeatureIndexes: [0]` to achieve the same result._\n\n#### `mode` (Function|Object, optional)\n\n- Default: `DrawPolygonMode`\n\nThe `mode` property defines the mode used to handle user interaction events (e.g. pointer events) in order to accomplish edits. This can either be a constructor for an `EditMode` or an instance of `EditMode`.\n\nThere are a extensive number of modes that come out-of-the-box with nebula.gl. See [modes overview](../modes/overview.md).\n\n#### `modeConfig` (Object, optional)\n\n- Default: `null`\n\nAn arbitrary object used to further configure the current mode.\n\nSnapping-related `modeConfig` properties:\n\n- `enableSnapping` (Boolean, optional) - Enables snapping for modes that support snapping such as translate mode.\n- `additionalSnapTargets` (Object[], optional) - An array of GeoJSON Features that can be snapped to. This property only needs to be specified if you want to snap to features in other deck.gl layers. All features in this `EditableGeoJsonLayer` will be snap targets.\n\n#### `selectedFeatureIndexes` (Array, optional)\n\n- Default: `[]`\n\nThe `selectedFeatureIndexes` property distinguishes which features to treat as selected. This property is required when using the `DrawPolygonMode` edit mode.\n\n- Features are identified by their index in the collection.\n\n- Selection of a feature causes style accessors to render a different style, defined in function such as `getLineColor` and `getFillColor`.\n\n- Selected features in mode `modify` will render edit handles. Only one feature may be selected while in mode `drawLineString` or `drawPolygon` to draw a feature.\n\n_Note: make sure to pass in the same array instance on each render if you are not changing selection. Otherwise, nebula.gl may clear state on every render (e.g. may clear a drawing in progress if the viewport changes)._\n\n#### `onEdit` (Function, optional)\n\nThe `onEdit` event is the core event provided by this layer and must be handled in order to accept and render edits. The `event` argument includes the following properties:\n\n- `updatedData` (Object): A new `FeatureCollection` with the edit applied.\n\n  - To accept the edit as is, supply this object into the `data` prop on the next render cycle (e.g. by calling React's `setState` function)\n\n  - To reject the edit, do nothing\n\n  - You may also supply a modified version of this object into the `data` prop on the next render cycle (e.g. if you have your own snapping logic).\n\n- `editType` (String): The type of edit requested. One of:\n\n  - `updateTentativeFeature`: Fired whenever a feature is near completion, and user continued dragging the cursor mid-editing. It fires on pointer move for `DrawPointMode`. The tentative feature created is different for each mode.\n\n  - `movePosition`: A position was moved.\n\n  - `addPosition`: A position was added (either at the beginning, middle, or end of a feature's coordinates).\n\n  - `removePosition`: A position was removed. Note: it may result in multiple positions being removed in order to maintain valid GeoJSON (e.g. removing a point from a triangular hole will remove the hole entirely).\n\n  - `addFeature`: A new feature was added. Its index is reflected in `featureIndexes`\n\n  - `cancelFeature`: The new drawing was cancelled.\n\n  - `finishMovePosition`: A position finished moving (e.g. user finished dragging).\n\n  - `scaling`: A feature is being scaled.\n\n  - `scaled`: A feature finished scaling (increase/decrease) (e.g. user finished dragging).\n\n  - `rotating`: A feature is being rotated.\n\n  - `rotated`: A feature finished rotating (e.g. user finished dragging).\n\n  - `translating`: A feature is being translated.\n\n  - `translated`: A feature finished translating (e.g. user finished dragging).\n\n  - `startExtruding`: An edge started extruding (e.g. user started dragging).\n\n  - `extruding`: An edge is extruding.\n  - `extruded`: An edge finished extruding (e.g. user finished dragging).\n\n  - `split`: A feature finished splitting.\n\n* `featureIndexes` (Array&lt;number&gt;): The indexes of the edited/added features.\n\n* `editContext` (Object): `null` or an object containing additional context about the edit. This is populated by the active mode, see [modes overview](../modes/overview.md).\n\n### Guide style properties and data getters\n\n#### `editHandleType`: (String, optional)\n\n- Default `point`\n\nEdit handles are points that are part of an existing geometry used for manipulation or snapping.\n\n- `existing`\n- `snap-source`\n- `snap-target`\n- `intermediate`\n- `existing`\n- `snap`\n\nSee the 'Edit Handles' section below.\n\n#### `getTentativeLineColor` (Array|Function, optional)\n\n- Default: `[0, 0, 0, 255]`\n\nThe line color for features that are being edited and are not yet finalized. See `getLineColor`in [DeckGl GeoJSONLayer](https://deck.gl/docs/api-reference/layers/geojson-layer).\n\n#### `getTentativeFillColor` (Array|Function, optional)\n\n- Default `[0, 0, 0, 255]`\n\nThe fill color for features that are being edited and are not yet finalized. See `getFillColor`in [DeckGl GeoJSONLayer](https://deck.gl/docs/api-reference/layers/geojson-layer).\n\n#### `getTentativeLineWidth` (Function|Number, optional)\n\n- Default `3`\n\nThe line width for features that are being edited and are not yet finalized, in units specified by lineWidthUnits (default meters). See `getLineWidth`in [DeckGl GeoJSONLayer](https://deck.gl/docs/api-reference/layers/geojson-layer).\n\nIf a number is provided, it is used as the outline width for all objects.\nIf a function is provided, it is called on each object to retrieve its outline width.\nIf not provided, it falls back to strokeWidth.\n\n#### `editHandlePointRadiusScale`: (Function|Number, optional)\n\n- Default: `1`\n\nA global radius multiplier for all edit handle points. See `radiusScale` in [DeckGl ScatterplotLayer](https://deck.gl/docs/api-reference/layers/scatterplot-layer).\n\n#### `editHandlePointOutline`: (Boolean|Function, optional)\n\n- Default: `true`\n\nOnly draw outline of points. It falls back to outline if not provided. See `stroke` in [DeckGl ScatterplotLayer](https://deck.gl/docs/api-reference/layers/scatterplot-layer).\n\n#### `editHandlePointStrokeWidth`: (Function|Number)\n\n- Default: `2`\n\n#### `editHandlePointRadiusMinPixels`: (Function|Number)\n\n- Default: `4`\n\nThe minimum radius of the edit handle in pixels. This prop can be used to prevent the circle from getting too small when zoomed out. See `radiusMinPixels` in [DeckGl ScatterplotLayer](https://deck.gl/docs/api-reference/layers/scatterplot-layer).\n\n#### `editHandlePointRadiusMaxPixels`: (Function|Number, optional)\n\n- Default: `8`\n\nThe maximum radius of the edit handle in pixels. This prop can be used to prevent the circle from getting too big when zoomed in. See `radiusMaxPixels` in [DeckGl ScatterplotLayer](https://deck.gl/docs/api-reference/layers/scatterplot-layer).\n\n#### `getEditHandlePointColor` (Array|Function, optional)\n\n- Default: `[0, 0, 0, 255]`\n\nThe rgba color is in the format of `[r, g, b, [a]]`. Each channel is a number between 0-255 and `a` is 255 if not supplied.\n\nIf an array is provided, it is used as the filled color for all objects.\n\nIf a function is provided, it is called on each object to retrieve its color.\n\nSee `getFillColor` in [DeckGl ScatterplotLayer](https://deck.gl/docs/api-reference/layers/scatterplot-layer).\n\n#### `getEditHandlePointOutlineColor` (Array|Function, optional)\n\n- Default `[0, 0, 0, 255]`\n\nThe outline color of the edit handle point. See in DeckGl\n\nThe rgba color is in the format of `[r, g, b, [a]]`. Each channel is a number between 0-255 and `a` is 255 if not supplied.\n\nIf an array is provided, it is used as the outline color for all objects.\n\nIf a function is provided, it is called on each object to retrieve its color.\n\nSee `getLineColor` in [DeckGl ScatterplotLayer](https://deck.gl/docs/api-reference/layers/scatterplot-layer).\n\n#### `getEditHandlePointRadius` (Function|Number, optional)\n\n- Default: `1`\n\nThe radius of each edit handle, in units specified by radiusUnits (default `meters`).\n\nIf a number is provided, it is used as the radius for all objects.\n\nIf a function is provided, it is called on each object to retrieve its radius.\n\nSee `getRadius` in [DeckGl ScatterplotLayer](https://deck.gl/docs/api-reference/layers/scatterplot-layer).\n\n---\n\n#### `editHandleIconAtlas` (String|Texture2D|Image|ImageData|HTMLCanvasElement|HTMLVideoElement|ImageBitmap|Object, optional)\n\nDefault: `null`\n\nSee `iconAtlas`in [DeckGl IconLayer](https://deck.gl/docs/api-reference/layers/icon-layer).\n\n#### `editHandleIconMapping` (Object|String, optional)\n\nThe atlas image.\n\nIf a string is supplied, it is interpreted as a URL or a Data URL.\nOne of the valid pixel sources for WebGL texture\nA luma.gl Texture2D instance\nA plain object that can be passed to the Texture2D constructor, e.g. `{width: <number>, height: <number>, data: <Uint8Array>}`. Note that whenever this object shallowly changes, a new texture will be created.\nThe image data will be converted to a Texture2D object. See textureParameters prop for advanced customization.\n\nIf you go with pre-packed strategy, this prop is required.\n\nIf you choose to use auto packing, this prop should be left empty.\n\nSee `iconMapping` in [DeckGl IconLayer](https://deck.gl/docs/api-reference/layers/icon-layer).\n\n#### `editHandleIconSizeScale` (Number, optional)\n\n- Default `1`\n\nEdit handle icon size multiplier.\n\nSee `sizeScale` in [DeckGl IconLayer](https://deck.gl/docs/api-reference/layers/icon-layer).\n\n#### `getEditHandleIcon` (Function, optional)\n\n- Default: `d => d.icon`\n\nMethod called to retrieve the icon name of each edit handle, returns string or object.\n\nIf you go with pre-packed strategy, then getIcon should return a string representing name of the icon, used to retrieve icon definition from given iconMapping.\n\nIf you choose to use auto packing, then getIcon should return an object which contains the following properties.\n\n- `url` (String, required): url to fetch the icon\n- `height` (Number, required): height of icon\n- `width` (Number, required): width of icon\n- `id`: (String, optional): unique identifier of the icon, fall back to url if not specified\n- `anchorX`, `anchorY`, `mask` are the same as mentioned in iconMapping\n\n`IconLayer` use `id` (fallback to url) to dedupe icons. If for the same icon identifier, getIcon returns different `width` or `height`, `IconLayer` will only apply the first occurrence and ignore the rest of them.\n\nSee `getIcon` in [DeckGl IconLayer](https://deck.gl/docs/api-reference/layers/icon-layer).\n\n#### `getEditHandleIconSize` (Function|Number, optional)\n\n- Default `10`\n\nThe height of each edit handle icon, in units specified by `sizeUnits` (default pixels).\n\nIf a number is provided, it is used as the size for all objects.\nIf a function is provided, it is called on each object to retrieve its size.\n\nSee `getSize` in [DeckGl IconLayer](https://deck.gl/docs/api-reference/layers/icon-layer).\n\n#### `getEditHandleIconColor` (Function|Array, optional)\n\n- Default: `[0, 0, 0, 255]`\n\nThe rgba color is in the format of `[r, g, b, [a]]`. Each channel is a number between 0-255 and `a` is 255 if not supplied.\n\n- If an array is provided, it is used as the color for all objects.\n- If a function is provided, it is called on each object to retrieve its color.\n- If `mask` = false, only the alpha component will be used to control the opacity of the icon.\n\nSee `getColor` in [DeckGl IconLayer](https://deck.gl/docs/api-reference/layers/icon-layer).\n\n#### `getEditHandleIconAngle` (Function|Number, optional)\n\n- Default `0`\n\nThe rotating angle of each edit handle icon, in degrees.\n\n- If a number is provided, it is used as the angle for all objects.\n- If a function is provided, it is called on each object to retrieve its angle.\n\nSee `getAngle` in [DeckGl IconLayer](https://deck.gl/docs/api-reference/layers/icon-layer).\n\n#### `billboard` (Boolean, optional)\n\n- Default: `true`\n\nIf on, the edit handle icon always faces camera. Otherwise the icon faces up (z)\n\n##### Example\n\nConsider the user removed the third position from a `Polygon`'s first ring, and that `Polygon` was the fourth feature in the `FeatureCollection`. The `event` argument would look like:\n\n```js\n{\n  updatedData: {...},\n  editType: 'removePosition',\n  featureIndexes: [3],\n  editContext: {\n    positionIndexes: [1, 2],\n    position: null\n  }\n}\n```\n\n#### `pickable` (Boolean, optional)\n\n- Default: `true`\n\nDefaulted to `true` for interactivity.\n\n#### `pickingRadius` (Number, optional)\n\n- Default: `10`\n\nNumber of pixels around the mouse cursor used for picking. This value determines, for example, what feature is considered to be clicked and what is close enough to be snapped to.\n\n#### `pickingDepth` (Number, optional)\n\n- Default: `5`\n\nNumber of layers of overlapping features that will be picked. Useful in cases where features overlap.\n\n#### `pickingLineWidthExtraPixels` (Number, optional)\n\n- Default: `0`\n\nAdditional line width in pixels used for picking. Can be useful when `EditableGeojsonLayer` is over a deck.gl layer and precise picking is problematic, and when usage of `pickingDepth` introduces performance issues.\n\n### Sub Layers\n\n`EditableGeoJsonLayer` renders the following sub-layers:\n\n- `geojson`: a [GeoJsonLayer](https://deck.gl/docs/api-reference/layers/geojson-layer) that renders the GeoJSON features passed into the `data` property.\n- `guides`: a [GeoJsonLayer](https://deck.gl/docs/api-reference/layers/geojson-layer) that renders GeoJSON features that aid in editing.\n- `tooltips`: a [TextLayer](https://deck.gl/docs/api-reference/layers/text-layer) that renders tooltips used in some editing modes.\n\nThe styling and functionality of `EditableGeoJsonLayer` can be customized by providing the [\\_subLayerProps](https://deck.gl/docs/api-reference/core/composite-layer#_sublayerprops) property. For example:\n\n```js\nnew EditableGeoJsonLayer({\n  // ...\n  _subLayerProps: {\n    geojson: {\n      getFillColor: (feature) => getFillColorForFeature(feature),\n      getLineColor: (feature) => getLineColorForFeature(feature),\n    },\n  },\n});\n```\n\n#### `geojson` Sub Layer\n\nThe features being edited are rendered in the `geojson` sub layer whether they are selected or not. If you want to style selected features differently than unselected features, you can accomplish it like this:\n\n```js\nconst [data] = React.useState(/* some GeoJSON */);\nconst [selectedFeatureIndexes] = React.useState(/* array of selected features */);\n\nnew EditableGeoJsonLayer({\n  // ...\n  data,\n  selectedFeatureIndexes,\n  _subLayerProps: {\n    geojson: {\n      getFillColor: (feature) => {\n        if (selectedFeatureIndexes.some((i) => data.features[i] === feature)) {\n          return SELECTED_FILL_COLOR;\n        } else {\n          return UNSELECTED_FILL_COLOR;\n        }\n      },\n    },\n  },\n});\n```\n\n#### `guides` Sub Layer\n\nThere are two types of \"guides\" rendered in the `guides` sub layer differentiated by `properties.guideType` of each feature.\n\n##### Tentative Features\n\nWhile creating a new feature in any of the `draw` modes, portion of a feature which has not been \"committed\" yet can hold its own props. For example, in `drawLineString` mode, the tentative feature is the last line segment moving under the mouse. For polygons and ellipses, this would be the whole feature during drawing. A tentative feature can be identified by checking if `properties.guideType === 'tentative'`.\n\n##### HotKey Support\n\nOnly `Escape` hotkey is currently supported to drop the Tentative feature entirely. However, if the feature is already committed, the `Escape` will do nothing. For example, when a point is drawn, it is finalized and no in drawing status.\n\n##### Edit Handles\n\nEdit handles are the points rendered on a feature to indicate interactive capabilities (e.g. vertices that can be moved). Edit Handles can be identified by checking if `properties.guideType === 'editHandle'`.\n\nThere are also different types of edit handles differentiated by `properties.editHandleType`:\n\n- `existing`: this is an edit handle rendered at an existing position of a feature\n- `intermediate`: this is an edit handle rendered between existing positions (e.g. to add new positions)\n- `snap-source`: this is an edit handle being moved that can snap to a `snap-target` edit handle\n- `snap-target`: this is an edit handle that will be snapped to if the pointer moves close enough\n\n##### Example\n\nThis shows how you can override how guides are rendered:\n\n```js\nnew EditableGeoJsonLayer({\n  // ...\n  _subLayerProps: {\n    guides: {\n      getFillColor: (guide) => {\n        if (guide.properties.guideType === 'tentative') {\n          return TENTATIVE_FILL_COLOR;\n        } else {\n          return EDIT_HANDLE_FILL_COLOR;\n        }\n      },\n    },\n  },\n});\n```\n\n#### `tooltips` Sub Layer\n\nSome modes will render tooltips. For example, the measure modes. These modes will render text in the `tooltips` sub layer.\n\n```js\nnew EditableGeoJsonLayer({\n  // ...\n  _subLayerProps: {\n    tooltips: {\n      getSize: 32,\n    },\n  },\n});\n```\n\n### Using without React\n\nIt is possible to use EditableGeoJsonLayer without react. Here's a working CodeSandbox:\n\nhttps://codesandbox.io/s/deckgl-and-nebulagl-editablegeojsonlayer-no-react-p9yrs\n\nCredit: [Graham Bates](https://github.com/mogmog) and [Andy Baker](https://github.com/andybak)\n","slug":"docs/api-reference/layers/editable-geojson-layer","title":"EditableGeoJsonLayer"},{"excerpt":"MeshLayer The Mesh Layer renders a number of arbitrary geometries. For example, a fleet of 3d cars each with a position and an orientation…","rawMarkdownBody":"# MeshLayer\n\nThe Mesh Layer renders a number of arbitrary geometries. For example, a fleet of 3d cars each with a position and an orientation over the map.\n\n```js\nimport DeckGL from '@deck.gl/react';\nimport { MeshLayer } from '@deck.gl/experimental-layers';\nimport { CubeGeometry } from 'luma.gl';\n\nconst App = ({ data, viewport }) => {\n  /**\n   * Data format:\n   * [\n   *   {\n   *     position: [-122.45, 37.7],\n   *     angle: 0,\n   *     color: [255, 0, 0]\n   *   },\n   *   {\n   *     position: [-122.46, 37.73],\n   *     angle: 90,\n   *     color: [0, 255, 0]\n   *   },\n   *   ...\n   * ]\n   */\n  const layer = new MeshLayer({\n    id: 'mesh-layer',\n    data,\n    sizeScale: 100,\n    texture: 'texture.png',\n    mesh: new CubeGeometry(),\n  });\n\n  return <DeckGL {...viewport} layers={[layer]} />;\n};\n```\n\n## Properties\n\n##### `mesh` (Geometry|Object)\n\nThe geometry to render for each data object.\nCan be a luma.gl [Geometry](https://luma.gl/docs/api-reference/engine/geometry) instance, or an object of attributes.\n\nThe following attributes are expected:\n\n- `positions` (Float32Array) - 3d vertex offset from the object center, in meters\n- `normals` (Float32Array) - 3d nomals\n- `texCoords` (Float32Array) - 2d texture coordinates\n\n##### `texture` (Texture2D|Image|String, optional)\n\n- Default `null`.\n\nThe texture of the geometries.\nCan be either a luma.gl [Texture2D](https://luma.gl/docs/api-reference/webgl/texture-2d\\) instance, an HTMLImageElement, or a url string to the texture image.\n\nIf `texture` is supplied, texture is used to render the geometries. Otherwise, object color obtained via the `getColor` accessor is used.\n\n##### `sizeScale` (Number, optional)\n\n- Default `1`.\n\nMultiplier to scale each geometry by.\n\n##### `getPosition` (Function, optional)\n\n- Default: `object => object.position`\n\nThis accessor returns the center position corresponding to an object in the `data` stream.\n\n##### `getYaw` (Function, optional)\n\n- Default: `object => object.yaw || object.angle || 0`\n\nThe yaw (heading) in degrees of each object.\n\n##### `getPitch` (Function, optional)\n\n- Default: `object => object.pitch || 0`\n\nThe pitch (elevation) in degrees of each object.\n\n##### `getRoll` (Function, optional)\n\n- Default: `object => object.roll || 0`\n\nThe roll (bank) in degrees of each object.\n\nSee [Euler angles](https://en.wikipedia.org/wiki/Euler_angles).\n\n##### `getScale` (Function, optional)\n\n- Default: `object => object.scale || [1, 1, 1]`\n\nScaling factor on the mesh along each axis.\n\n##### `getTranslation` (Function, optional)\n\n- Default: `object => object.translation || [0, 0, 0]`\n\nTranslation of the mesh along each axis. Offset from the center position given by `getPosition`\n\n##### `getMatrix` (Function, optional)\n\n- Default: `object => null`\n\nExplicitly define a 4x4 column-major model matrix for the mesh. If provided, will override\n`getYaw`, `getPitch`, `getRoll`, `getScale`, `getTranslation`.\n\n##### `getColor` (Function|Array, optional)\n\n- Default: `[0, 0, 0, 255]`\n\nThe color of each object. Only used if `texture` is empty.\n\n##### `fp64` (Boolean, optional)\n\n- Default: `false`\n\nWhether the layer should be rendered in high-precision 64-bit mode\n\n##### `lightSettings` (Object, optional)\n\n**TO BE REPLACED**\n\nWith `@deck.gl/mesh-layers`\n","slug":"docs/api-reference/layers/mesh-layer","title":"MeshLayer"},{"excerpt":"Outline (Shader Module) The outline module is useful when you are rendering 2D elements in the same plane (on top of each other), but want…","rawMarkdownBody":"# Outline (Shader Module)\n\nThe `outline` module is useful when you are rendering 2D elements in the same plane (on top of each other), but want to show some kind of outline or shadow to indicate which element is logically on top.\n\nImplementation note: This module works by rendering your graphics into a sample \"outline\" shadow map, and then darkens the color on pixels in your graphics when they are drawn close to another object with a higher \"logical z order\", giving a shadow outline effect.\n\n## Usage\n\nYour vertex shader might look like:\n\n```\nattribute vec3 position;\nattribute vec4 lineColor;\nattribute float zLevel;\n\nvarying vec4 vColor;\n\nvoid main() {\n  ...\n\n  gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1);\n  vColor = lineColor;\n\n  ...\n\n  // Store info needed to render outline shadows\n  outline_setZLevel(zLevel);\n  outline_setUV(gl_Position);\n}\n```\n\nAnd in the fragment shader:\n\n```\nvarying vec4 vColor;\n\nvoid main() {\n  gl_FragColor = vColor;\n\n  ...\n\n  // Render outline shadows\n  gl_FragColor = outline_filterColor(gl_FragColor);\n\n  ...\n}\n```\n\n## getUniforms\n\n`getUniforms({outlineRender, outlineShadowMap})`\n\n- `outlineRender` (Boolean, `false`) - set to `true` during the \"outline map\" rendering pass (i.e. specifies whether to render into or from the shadowmap).\n- `outlineShadowmap` (`Texture`, required) -\n","slug":"docs/api-reference/layers/outline","title":"Outline (Shader Module)"},{"excerpt":"PathMarkerLayer Create small markers along a path (defaults to arrows showing \"direction\").","rawMarkdownBody":"# PathMarkerLayer\n\nCreate small markers along a path (defaults to arrows showing \"direction\").\n","slug":"docs/api-reference/layers/path-marker-layer","title":"PathMarkerLayer"},{"excerpt":"SelectionLayer This layer can be used to select deck.gl objects using mouse drawing. Properties Inherits all deck.gl's Base Layer properties…","rawMarkdownBody":"# SelectionLayer\n\nThis layer can be used to select deck.gl objects using mouse drawing.\n\n```js\nimport * as React from 'react';\nimport ReactDOM from 'react-dom';\nimport DeckGL from '@deck.gl/react';\nimport { ScatterplotLayer } from '@deck.gl/layers';\nimport { SelectionLayer } from '@nebula.gl/layers';\nimport { StaticMap } from 'react-map-gl';\n\nconst MAPBOX_ACCESS_TOKEN = ''; // add your mapbox token here\n\nconst initialViewState = {\n  longitude: -73.986022,\n  latitude: 40.730743,\n  zoom: 12,\n};\n\nconst MALE_COLOR = [0, 128, 255];\nconst FEMALE_COLOR = [255, 0, 128];\nconst DATA_URL =\n  'https://raw.githubusercontent.com/visgl/deck.gl-data/master/examples/scatterplot/manhattan.json'; // eslint-disable-line\n\nconst App = function () {\n  const radius = 30;\n  const maleColor = MALE_COLOR;\n  const femaleColor = FEMALE_COLOR;\n  const data = fetch(DATA_URL).then((resp) => resp.json());\n\n  const layers = [\n    new ScatterplotLayer({\n      id: 'scatter-plot',\n      data,\n      radiusScale: radius,\n      radiusMinPixels: 0.25,\n      getPosition: (d) => [d[0], d[1], 0],\n      getFillColor: (d) => (d[2] === 1 ? maleColor : femaleColor),\n      getRadius: 1,\n      pickable: true,\n      updateTriggers: {\n        getFillColor: [maleColor, femaleColor],\n      },\n    }),\n    new SelectionLayer({\n      id: 'selection',\n      selectionType: 'rectangle',\n      onSelect: ({ pickingInfos }) => {},\n      layerIds: ['scatter-plot'],\n      getTentativeFillColor: () => [255, 0, 255, 100],\n      getTentativeLineColor: () => [0, 0, 255, 255],\n      getTentativeLineDashArray: () => [0, 0],\n      lineWidthMinPixels: 1,\n    }),\n  ];\n\n  return (\n    <DeckGL initialViewState={initialViewState} controller={true} layers={layers}>\n      <StaticMap mapboxApiAccessToken={MAPBOX_ACCESS_TOKEN} />\n    </DeckGL>\n  );\n};\n```\n\n## Properties\n\nInherits all [deck.gl's Base Layer](https://deck.gl/docs/api-reference/core/layer) properties.\n\nAlso inherites **some** EditableGeoJsonLayer properties.\n\n> Note: do not pass a data property.\n\n#### `selectionType` (String, required)\n\n- Default: `null`\n\nEither `rectangle` or `polygon`\n\n#### `onSelect` (Function, required)\n\nCalled when selection is completed.\n\n#### `layerIds` (String[], required)\n\nArray of layer ids where we will search.\n","slug":"docs/api-reference/layers/selection-layer","title":"SelectionLayer"}]}}}